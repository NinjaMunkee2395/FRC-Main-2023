// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "subsystems/DriveTrain.h"
#include <frc/smartdashboard/SmartDashboard.h>

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

#include "RobotContainer.h"
AHRS navx{frc::I2C::Port::kMXP};


DriveTrain::DriveTrain(){
    SetName("Drive Train");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SetSubsystem("Drive Train");

 AddChild("Mecanum Drive", &m_mecanumDrive);
 m_mecanumDrive.SetSafetyEnabled(true);
m_mecanumDrive.SetExpiration(0.1_s);
m_mecanumDrive.SetMaxOutput(0.2);


 AddChild("RearRight", &m_rearRight);
 

 AddChild("RearRight1", &m_rearRight1);
 m_rearRight1.SetInverted(true);

 AddChild("RearRight2", &m_rearRight2);
 m_rearRight2.SetInverted(true);

 AddChild("FrontRight", &m_frontRight);
 

 AddChild("FrontRight2", &m_frontRight2);
 m_frontRight2.SetInverted(true);

 AddChild("FrontRight1", &m_frontRight1);
 m_frontRight1.SetInverted(true);

 AddChild("RearLeft", &m_rearLeft);
 

 AddChild("RearLeft2", &m_rearLeft2);
 m_rearLeft2.SetInverted(false);

 AddChild("RearLeft1", &m_rearLeft1);
 m_rearLeft1.SetInverted(false);

 AddChild("FrontLeft", &m_frontLeft);
 

 AddChild("FrontLeft2", &m_frontLeft2);
 m_frontLeft2.SetInverted(false);

 AddChild("FrontLeft1", &m_frontLeft1);
 m_frontLeft1.SetInverted(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void DriveTrain::Periodic() {
    // Put code here to be run every loop

    int rotX = navx.GetRawGyroX();
    int rotY = navx.GetRawGyroY();
    int rotZ = navx.GetRawGyroZ();

    frc::SmartDashboard::PutNumber("Rotation X", rotX);
    frc::SmartDashboard::PutNumber("Rotation Y", rotY);
    frc::SmartDashboard::PutNumber("Rotation Z", rotZ);

}

void DriveTrain::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::MechanumDrive(double mechX, double mechY, double mechRot){
    frc::SmartDashboard::PutNumber("mechX", mechX);
    frc::SmartDashboard::PutNumber("mechY", mechY);
    frc::SmartDashboard::PutNumber("mechRot", mechRot);
    m_mecanumDrive.DriveCartesian(-mechY, -mechX, mechRot);
}
