// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "subsystems/Pnenumatics.h"
#include <frc/smartdashboard/SmartDashboard.h>
#include "iostream"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Pnenumatics::Pnenumatics(){
    SetName("Pnenumatics");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SetSubsystem("Pnenumatics");

 AddChild("Disco", &m_disco);
 

 AddChild("ArmLong", &m_armShort);
 

 AddChild("ArmShort", &m_armLong);
 

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Pnenumatics::Periodic() {
    // Put code here to be run every loop

}

void Pnenumatics::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Pnenumatics::CloseClaw() {
    Pnenumatics::m_disco.Set(frc::DoubleSolenoid::kReverse);
}

void Pnenumatics::OpenClaw() {
    Pnenumatics::m_disco.Set(frc::DoubleSolenoid::kForward);
}

int Pnenumatics::GetStage() {
    return armStage;
}

void Pnenumatics::DecStage() {
    armStage--;
    std::cout << "Moving Down Stage: " << armStage << std::endl;
    if (armStage < 0) {
        armStage = 0;
    }
    MoveStage(armStage);
}

void Pnenumatics::IncStage() {
    armStage++;
    std::cout << "Moving Up Stage: " << armStage << std::endl;
    if (armStage >= 3) {
        armStage = 3;
    }
    MoveStage(armStage);
}

void Pnenumatics::MoveStage(int stage) {
    switch (stage)
    {
    case 0:
        Pnenumatics::m_disco.Set(frc::DoubleSolenoid::kReverse);
        Pnenumatics::m_armLong.Set(frc::DoubleSolenoid::kReverse);
        Pnenumatics::m_armShort.Set(frc::DoubleSolenoid::kReverse);
        break;
    case 1:
        Pnenumatics::m_armShort.Set(frc::DoubleSolenoid::kReverse);
        Pnenumatics::m_armLong.Set(frc::DoubleSolenoid::kForward);
        break;
    case 2:
        Pnenumatics::m_armShort.Set(frc::DoubleSolenoid::kForward);
        Pnenumatics::m_armLong.Set(frc::DoubleSolenoid::kReverse);
        break;
    case 3:
        Pnenumatics::m_armLong.Set(frc::DoubleSolenoid::kForward);
        Pnenumatics::m_armShort.Set(frc::DoubleSolenoid::kForward);
        break;
    default:
        Pnenumatics::m_disco.Set(frc::DoubleSolenoid::kReverse);
        Pnenumatics::m_armLong.Set(frc::DoubleSolenoid::kReverse);
        Pnenumatics::m_armShort.Set(frc::DoubleSolenoid::kReverse);
        Pnenumatics::m_armLong.Set(frc::DoubleSolenoid::kOff);
        Pnenumatics::m_armShort.Set(frc::DoubleSolenoid::kOff);
        break;
    }
    //Pnenumatics::m_armLong.Set(frc::DoubleSolenoid::kOff);
    //Pnenumatics::m_armShort.Set(frc::DoubleSolenoid::kOff);
}
